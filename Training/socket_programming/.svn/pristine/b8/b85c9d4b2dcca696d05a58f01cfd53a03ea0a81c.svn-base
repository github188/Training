#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include "header.h"
#include <signal.h>

int iServerSocket;


void CloseSocket(iServerSocket)
{
	close(iServerSocket);
	printf("Close\n");
	exit(EXIT_SUCCESS);
}



int Udp_Server(char *pcServerPort)
{
	//int iServerSocket;
	char acBuffer[BUFFERSIZE] = {0};
	char acReply[BUFFERSIZE] = "OK! Server has reveived.";
	struct sockaddr_in TServerAddr, TClientAddr;
	int iReceived;
	unsigned int uiClientAddrLen;
	/*
	 *   建立socket
	 */

	if ((iServerSocket = socket(PF_INET, SOCK_STREAM, IPPROTO_UDP)) < 0)
	{
		printf("[Server] Failed to create socket\n");
		return FAIL;
	}

	/*
	 *   Set up address
	 */

	bzero((char *)&TServerAddr, sizeof(TServerAddr));
	TServerAddr.sin_family = AF_INET;
	TServerAddr.sin_addr.s_addr = htonl(INADDR_ANY);
	TServerAddr.sin_port = htons(atoi(pcServerPort));

	/*
	 *   Bind to address
	 */
	if (bind(iServerSocket, (struct sockaddr *)&TServerAddr, sizeof(TServerAddr)) < 0)
	{
		printf("[Server] Failed to bind\n");
		return FAIL;
	}

	uiClientAddrLen = sizeof(TClientAddr);

	while(1)
	{
		if ((iReceived = recvfrom(iServerSocket, acBuffer, BUFFERSIZE, 0, (struct sockaddr *)&TClientAddr, &uiClientAddrLen)) < 0)
		{
			printf("[Server] Failed to receive initial bytes from client\n");
			return FAIL;
		}

		printf("[Server] Client connected: %s:%d\n", inet_ntoa(TClientAddr.sin_addr), ntohs(TClientAddr.sin_port));

		if (sendto(iServerSocket, acReply, BUFFERSIZE, 0, (struct sockaddr *) &TClientAddr, uiClientAddrLen) < 0)
		{
			printf("[Server] Could not send datagram!\n");
			return FAIL;
		}
		printf("[Server] Receive message: %s\n", acBuffer);

		struct sigaction TSigHandler;
		TSigHandler.sa_handler = CloseSocket;
		sigemptyset(&TSigHandler.sa_mask);
		TSigHandler.sa_flags = 0;
		sigaction(SIGINT, &TSigHandler, NULL);

	}
	close(iServerSocket);
	return SUCCESS;

}




int main(int argc, char *argv[])
{
	if (argc == 3 && strcmp(argv[1], "server") == 0)
	{
		Udp_Server(argv[2]);
	}
	else
	{
		printf("Usage %s server <port>\n", argv[0]);
		return FAIL;
	}
	return SUCCESS;
}
